#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
        timestamps()
    }
//    tools { 
//        maven 'maven-3.8.5' 
//        jdk 'openjdk-11' 
//    }
    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                ''' 
            }
        }
        stage ('Build backend') {
            steps {
                updateGitlabCommitStatus name: 'build', state: 'pending'
                echo  " ============== start building backend ==================="
                dir ('backend') {
                	sh 'mvn clean package spring-boot:repackage'
                }
            }
            post {
                success {
                    updateGitlabCommitStatus name: 'build', state: 'success'
                    }
                failure {
                    updateGitlabCommitStatus name: 'build', state: 'failed'
                    }
            }
        }
        stage("create and run docker image for backend") {
            steps {
                echo " ============== start building docker image =================="
                sh 'cp /var/lib/jenkins/workspace/pipe_1/backend/target/market-backend-0.0.1-SNAPSHOT.jar /var/lib/jenkins/workspace/pipe_1/backend/market-backend-0.0.1-SNAPSHOT.jar'
                dir ('backend') {
                    sh 'docker 2>/dev/null 1>&2 stop app_back || true'
                    sh 'docker 2>/dev/null 1>&2 rmi backend-app:release || true'
                	sh 'docker build -t backend-app:release . '
                }
            }
        }
        stage("run docker container for backend") {
            steps {
                echo " ============== run docker container ========================="
                sh 'docker run --rm --name app_back -d -p 8181:8181 backend-app:release'
                sh 'docker ps'
                sh 'docker logs app_back'
            }
        }
        stage("create and run docker image for frontend") {
            steps {
                echo " ============== start building docker image =================="
                dir ('frontend') {
                    sh 'docker 2>/dev/null 1>&2 stop app_front || true'
                    sh 'docker 2>/dev/null 1>&2 rmi frontend-app:release || true'
                	sh 'docker build -t frontend-app:release . '
                }
            }
        }
        stage("run docker container for frontend") {
            steps {
                echo " ============== run docker container ========================="
                sh 'docker run --rm --name app_front -d -p 8182:3000 frontend-app:release'
                sh 'docker ps'
                sh 'docker logs app_front'
            }
        }

    }
}
